---
import Layout from "@layouts/Layout.astro";
import SectionContainer from "@layouts/SectionContainer.astro";
import Tabs from "@components/Tabs/Tabs.astro";
import TabPanel from "@components/Tabs/TabPanel.astro";
import H1Gradient from "@components/H1Gradient.astro";
import { Code } from "astro:components";
import { sharedCounterExamples, sharedFormExamples } from "@data/snippets";
// Counters
import AstroCounterShared from "@components/handle-state/astro/AstroCounterShared.astro";
import SvelteCounterShared from "@components/handle-state/svelte/SvelteCounterShared.svelte";
import { ReactCounterShared } from "@components/handle-state/react/ReactCounterShared";
import VueCounterShared from "@components/handle-state/vue/VueCounterShared.vue";
// Forms
import { ReactFormShared } from "@components/handle-state/react/ReactFormShared";
import SvelteFormShared from "@components/handle-state/svelte/SvelteFormShared.svelte";
import AstroFormShared from "@components/handle-state/astro/AstroFormShared.astro";
import VueFormShared from "@components/handle-state/vue/VueFormShared.vue";
---

<Layout
  title="Shared State Management with Nanostores in Astro"
  description="Discover how to implement shared state management in Astro using Nanostores. Learn techniques for sharing state across components and frameworks."
  keywords="Nanostores, Astro, Shared State, State Management, React, Vue, Svelte"
  showPersistent={true}
  isArticle={true}
>
  <SectionContainer
    innerClasses="flex flex-col items-center justify-center gap-6 text-center text-lg"
  >
    <H1Gradient text="Shared State Management" />
    <p class="text-start">
      Welcome to the shared state management demonstration! This page showcases how Nanostores can
      be used to manage shared state across different frameworks within an Astro project. Shared
      state means that all components, regardless of their framework, can access and modify the same
      state.
    </p>
    <p class="text-start">
      We'll demonstrate this concept using two common UI patterns: counters and forms. Each example
      is implemented in Astro, Svelte, React, and Vue, all sharing the same state. This allows you
      to see how changes in one component immediately reflect in all others, regardless of the
      framework used.
    </p>
  </SectionContainer>

  <SectionContainer innerClasses="flex flex-col gap-4 text-lg">
    <h2 class="text-2xl font-semibold md:text-3xl">Shared State Counters</h2>
    <p>
      These counters demonstrate how a single shared state can be accessed and modified by
      components built with different frameworks. Notice how updating the count in one counter
      updates all the others simultaneously.
    </p>
    <div class="my-8 grid grid-cols-1 gap-4 md:grid-cols-2">
      <div>
        <h3 class="mb-2 text-xl font-semibold md:text-2xl">Astro Counter</h3>
        <AstroCounterShared />
      </div>
      <div>
        <h3 class="mb-2 text-xl font-semibold md:text-2xl">Svelte Counter</h3>
        <SvelteCounterShared client:idle />
      </div>
      <div>
        <h3 class="mb-2 text-xl font-semibold md:text-2xl">React Counter</h3>
        <ReactCounterShared client:idle />
      </div>
      <div>
        <h3 class="mb-2 text-xl font-semibold md:text-2xl">Vue Counter</h3>
        <VueCounterShared client:load />
      </div>
    </div>
  </SectionContainer>

  <SectionContainer innerClasses="flex flex-col gap-4 text-lg">
    <h2 class="text-2xl font-semibold md:text-3xl">Shared Counter Code Examples</h2>
    <Tabs labels={["store.ts", "Astro", "Svelte", "React", "Vue"]}>
      <TabPanel index={0}>
        <Code code={sharedCounterExamples.store} lang="typescript" theme="aurora-x" class="p-4" />
      </TabPanel>
      <TabPanel index={1}>
        <Code code={sharedCounterExamples.astro} lang="astro" theme="aurora-x" class="p-4" />
      </TabPanel>
      <TabPanel index={2}>
        <Code code={sharedCounterExamples.svelte} lang="svelte" theme="aurora-x" class="p-4" />
      </TabPanel>
      <TabPanel index={3}>
        <Code code={sharedCounterExamples.react} lang="jsx" theme="aurora-x" class="p-4" />
      </TabPanel>
      <TabPanel index={4}>
        <Code code={sharedCounterExamples.vue} lang="vue" theme="aurora-x" class="p-4" />
      </TabPanel>
    </Tabs>
  </SectionContainer>

  <SectionContainer innerClasses="flex flex-col gap-4 text-lg">
    <h2 class="text-2xl font-semibold md:text-3xl">Shared State Forms</h2>
    <p>
      These forms demonstrate how complex shared state (multiple form fields) can be managed across
      different frameworks using Nanostores. Notice how updating a field in one form updates the
      same field in all other forms instantly.
    </p>
    <div class="my-8 grid grid-cols-1 gap-4 md:grid-cols-2">
      <div>
        <h3 class="mb-2 text-xl font-semibold md:text-2xl">Astro Form</h3>
        <AstroFormShared />
      </div>
      <div>
        <h3 class="mb-2 text-xl font-semibold md:text-2xl">Svelte Form</h3>
        <SvelteFormShared client:idle />
      </div>
      <div>
        <h3 class="mb-2 text-xl font-semibold md:text-2xl">React Form</h3>
        <ReactFormShared client:idle />
      </div>
      <div>
        <h3 class="mb-2 text-xl font-semibold md:text-2xl">Vue Form</h3>
        <VueFormShared client:load />
      </div>
    </div>
  </SectionContainer>

  <SectionContainer innerClasses="flex flex-col gap-4 text-lg">
    <h2 class="text-2xl font-semibold md:text-3xl">Shared Form Code Examples</h2>
    <Tabs labels={["store.ts", "Astro", "Svelte", "React", "Vue"]}>
      <TabPanel index={0}>
        <Code code={sharedFormExamples.store} lang="typescript" theme="aurora-x" class="p-4" />
      </TabPanel>
      <TabPanel index={1}>
        <Code code={sharedFormExamples.astro} lang="astro" theme="aurora-x" class="p-4" />
      </TabPanel>
      <TabPanel index={2}>
        <Code code={sharedFormExamples.svelte} lang="svelte" theme="aurora-x" class="p-4" />
      </TabPanel>
      <TabPanel index={3}>
        <Code code={sharedFormExamples.react} lang="jsx" theme="aurora-x" class="p-4" />
      </TabPanel>
      <TabPanel index={4}>
        <Code code={sharedFormExamples.vue} lang="vue" theme="aurora-x" class="p-4" />
      </TabPanel>
    </Tabs>
  </SectionContainer>
</Layout>
